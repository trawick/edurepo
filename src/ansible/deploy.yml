---

- name: Create remote users
  hosts: webservers
  remote_user: "{{ initial_user }}"
  sudo: true
  tasks:
    - name: Create remote user really
      user: name={{ remote_user }} comment="{{ project_name }} user" createhome=yes state=present

    - name: Add authorized key for {{ remote_user }}
      authorized_key: user={{ remote_user }}
                      key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
                      state=present

    - name: Add {{ remote_user }} to sudoers
      template: >
          src=sudoers.j2
          dest="/etc/sudoers.d/{{ remote_user }}"
      vars:
          sudoer_user: "{{ remote_user }}"

    - name: Add authorized key for {{ certbot_auto_renew_user }}
      authorized_key: user={{ certbot_auto_renew_user }}
                      key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
                      state=present

    - name: Create certbot user
      user: name={{ certbot_auto_renew_user }} comment="certbot renewer" createhome=yes state=present

    - name: Add {{ certbot_auto_renew_user }} to sudoers
      template: >
          src=sudoers.j2
          dest="/etc/sudoers.d/{{ certbot_auto_renew_user }}"
      vars:
          sudoer_user: "{{ certbot_auto_renew_user }}"

- name: Set up Let's Encrypt
  hosts: webservers
  remote_user: "{{ remote_user }}"
  sudo: true
  roles:
    - geerlingguy.certbot

- name: Configure and deploy the application code
  hosts: webservers
  remote_user: "{{ remote_user }}"
  tasks:
    - name: Update apt cache
      apt: update_cache=yes
      sudo: yes

    - name: Install packages
      apt: name={{ item }} state=latest
      sudo: yes
      with_items:
        - unzip
        - python-virtualenv
        - postgresql
        - libpq-dev
        - python-dev
# The system python-psycopg2 package is used by Ansible; the Django app uses psycopg2 from its virtualenv.
        - python-psycopg2
        - rabbitmq-server
        - supervisor

    - name: Install git
      apt: name=git state=latest
      sudo: yes

    - name: Install system httpd
      apt: name={{ item }} state=latest
      sudo: yes
      with_items:
        - apache2

    - name: Setup Postgresql user
      sudo: yes
      sudo_user: postgres
      postgresql_user: name={{ pg_user }} password={{ pg_password }} role_attr_flags=CREATEDB,NOSUPERUSER

    - name: Setup up Postgresql DB
      sudo: yes
      sudo_user: postgres
      postgresql_db: name={{ project_db }}
                     encoding='UTF-8'

    - name: Add the logging group
      group: name={{ log_group }} state=present
      sudo: yes

    - name: Add managing user to logging group
      user: name={{ remote_user }} groups={{log_group}} append=yes
      sudo: yes

    - name: Add daemon user to logging group
      user: name={{ log_dir_owner }} groups={{log_group}} append=yes
      sudo: yes

    - name: Create log directory
      file: >
          dest={{ log_dir }}
          mode=2775
          owner={{ log_dir_owner }}
          group={{ log_group }}
          state=directory
      sudo: yes

    - name: Create archive directory
      file: >
          dest=/home/{{ remote_user }}/backups
          state=directory

    - git: repo=git://github.com/trawick/{{ project_name }}.git
           dest={{ remote_checkout }}
           accept_hostkey=true
           version=HEAD
           update=yes
           force=no

    - template: src={{ base_cfg_dir }}/settings.cfg.j2 dest={{ django_src }}/settings.cfg

    - template: src=config.json.j2 dest={{ remote_checkout }}/src/webapp/resources/config.json

    - file: >
           dest={{ scratch_dir }}
           mode=755
           owner={{ remote_user }}
           group={{ remote_user }}
           state=directory

    - file: >
           dest={{ remote_checkout }}/envs
           mode=755
           owner={{ remote_user }}
           group={{ remote_user }}
           state=directory

    - name: Create new virtualenv
      command: "{{ virtualenv_binary }} -p {{ python_binary }} --no-site-packages {{ virtualenv_dir }} creates={{ virtualenv_dir }}"

    - file: >
           dest={{ static_dir }}
           mode=755
           owner={{ remote_user }}
           group={{ remote_user }}
           state=directory

    - pip: virtualenv={{ virtualenv_dir }}
           name=pip
           version=9.0.1

    - pip: virtualenv={{ virtualenv_dir }}
           requirements={{ remote_checkout }}/src/requirements.txt

    - django_manage: >
          app_path={{ django_src }}
          command=migrate
          virtualenv={{ virtualenv_dir }}

    - django_manage: >
          app_path={{ django_src }}
          command=collectstatic
          virtualenv={{ virtualenv_dir }}

    - name: Load repository data from XML
      django_manage: >
          app_path={{ django_src }}
          command="import_xml ../../samples/ import"
          virtualenv={{ virtualenv_dir }}

    - name: Skip import of resource data in the future
# Use this copy command to touch the file so that the timestamp isn't changed each time.
# That allows us to see the last time the resource data was imported.
      copy: content="" dest={{ remote_checkout }}/data-imported force=no
      notify:
      - load-resource-data

#   - name: Define server_validation cron job
#     cron: name="server_validation" hour="*/2" minute="11" job="{{ django_src }}/resources/server_validation.sh"

#   - name: Define server_purge cron job
#     cron: name="server_purge" hour="1" minute="11" job="{{ django_src }}/resources/server_purge.sh"

#   - name: Define maintain_pretend_teacher cron job
#     cron: name="maintain_pretend_teacher" hour="0" minute="30" job="{{ django_src }}/teachers/pretend_teacher.sh --from-json={{ remote_checkout }}/src/webapp/resources/config.json"

    - name: Define nightly_archive cron job
      cron: name="nightly_archive" hour="1" minute="20" job="{{ django_src }}/backup.sh /home/{{ remote_user }}/backups"
      when: nightly_archive != "no"

    - name: Set up pretend teacher immediately, so that the demo works without waiting for the cron job.
      django_manage: >
          app_path={{ django_src }}
          command="pretend_teacher {{canonical_base_url }}ed/"
          virtualenv={{ virtualenv_dir }}

    - name: Configure supervisord to run celery worker
      template: src={{ project_name }}-celery-worker.conf.j2 dest=/etc/supervisor/conf.d/{{ project_name }}-celery-worker.conf
      sudo: yes
      notify: restart supervisord

    - name: Configure supervisord to run celery beat
      template: src={{ project_name }}-celery-beat.conf.j2 dest=/etc/supervisor/conf.d/{{ project_name }}-celery-beat.conf
      sudo: yes
      notify: restart supervisord

    - name: Configure system httpd to include necessary modules
      apache2_module: state=present name={{ item }}
      sudo: yes
      with_items:
        - cgid
        - deflate
        - expires
        - headers
        - proxy
        - proxy_scgi
        - rewrite
        - ssl
      notify: restart system httpd

    - name: Configure system httpd
      template: src=edurepo-vhost.conf.j2 dest=/etc/apache2/sites-enabled/edurepo-vhost.conf
      sudo: yes
      notify: restart system httpd

    - name: Configure system httpd SSL and other global settings
      template: src=staging-ssl-common.conf.j2 dest=/etc/apache2/conf-enabled/staging-ssl-common.conf
      sudo: yes
      when: server_type == "staging"
      notify: restart system httpd

    - name: Disable system httpd default site
      command: a2dissite 000-default
      sudo: yes
      notify: restart system httpd

    - name: Make sure httpd is started and will run at boot
      service: name=apache2 state=started enabled=yes
      sudo: yes

    - name: Create uWSGI config directory
      file: >
          dest={{ uwsgi_cfg_dir }}
          mode=755
          owner=root
          group=root
          state=directory
      sudo: yes

    - name: Add application uWSGI config
      template: src=uwsgi-ini.j2 dest={{ uwsgi_cfg_dir }}/{{ project_name }}.ini
      sudo: yes
      notify: restart application

    - name: Add application init script
      template: src=init-script.j2 dest=/etc/init.d/{{ project_name }}-app mode=0751
      sudo: yes
      notify: restart application

    - name: Configure run-levels for application
      command: update-rc.d {{ project_name }}-app defaults
      sudo: yes
      notify: restart application

    - name: Run application
      action: service name={{ project_name }}-app state=started
      sudo: yes

  handlers:
    - name: load-resource-data
      django_manage: >
          command=loaddata
          app_path={{ django_src }}
          virtualenv={{ virtualenv_dir }}
          fixtures={{ django_src }}/resources/fixtures/sample.json

    - name: restart application
      service: name={{ project_name }}-app state=restarted
      sudo: yes

    - name: restart supervisord
      service: name=supervisor state=restarted
      sudo: yes

    - name: restart system httpd
      service: name=apache2 state=restarted
      sudo: yes
 