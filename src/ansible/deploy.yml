---

- name: Configure and deploy the application code
  hosts: webservers
  remote_user: "{{ remote_user }}"
  tasks:
    - name: Install packages
      apt: name={{ item }} state=latest
      sudo: yes
      with_items:
        - unzip
        - python-virtualenv
        - postgresql
        - libpq-dev
        - python-dev
# The system python-psycopg2 package is used by Ansible; the Django app uses psycopg2 from its virtualenv.
        - python-psycopg2
    - name: Install git
      apt: name=git state=latest
      sudo: yes
      when: ansible_distribution_release != "lucid"
    - name: Install git
      apt: name=git-core state=latest
      sudo: yes
      when: ansible_distribution_release == "lucid"
    - name: Install system httpd
      apt: name={{ item }} state=latest
      sudo: yes
      with_items:
        - apache2
        - libapache2-mod-wsgi
      when: use_system_httpd == "yes"
    - name: Setup up Postgresql user
      sudo: yes
      sudo_user: postgres
      postgresql_user: name={{ edurepo_pg_user }} password={{ edurepo_pg_password }} role_attr_flags=CREATEDB,NOSUPERUSER
    - name: Setup up Postgresql DB
      sudo: yes
      sudo_user: postgres
      postgresql_db: name={{ edurepo_db }}
                     encoding='UTF-8'
    - name: Add the logging group
      group: name={{ log_group }} state=present
      sudo: yes
    - name: Add managing user to logging group
      user: name={{ remote_user }} groups={{log_group}} append=yes
      sudo: yes
    - name: Add daemon user to logging group
      user: name={{ log_dir_owner }} groups={{log_group}} append=yes
      sudo: yes
    - name: Create log directory
      file: >
          dest={{ log_dir }}
          mode=2775
          owner={{ log_dir_owner }}
          group={{ log_group }}
          state=directory
      sudo: yes
    - name: Create archive directory
      file: >
          dest=/home/{{ remote_user }}/backups
          state=directory
    - git: repo=git://github.com/trawick/edurepo.git
           dest={{ remote_checkout }}
           version=HEAD
           update=yes
           force=no
    - template: src={{ local_overlay_dir }}/src/edurepo/settings.cfg dest={{ remote_checkout }}/src/edurepo
    - template: src=config.json.j2 dest={{ remote_checkout }}/src/webapp/resources/config.json
    - file: >
           dest={{ scratch_dir }}
           mode=755
           owner={{ remote_user }}
           group={{ remote_user }}
           state=directory
    - file: >
           dest={{ remote_checkout }}/envs
           mode=755
           owner={{ remote_user }}
           group={{ remote_user }}
           state=directory
    - name: Create new virtualenv
      command: "{{ virtualenv_binary }} -p {{ python_binary }} --no-site-packages {{ remote_checkout }}/envs/edurepo creates={{ remote_checkout }}/envs/edurepo"
    - file: >
           dest={{ static_dir }}
           mode=755
           owner={{ remote_user }}
           group={{ remote_user }}
           state=directory
    - pip: virtualenv={{ remote_checkout }}/envs/edurepo
           requirements={{ remote_checkout }}/src/requirements.txt
    - django_manage: >
          app_path={{ remote_checkout }}/src/edurepo
          command=migrate
          virtualenv={{ remote_checkout }}/envs/edurepo
    - django_manage: >
          app_path={{ remote_checkout }}/src/edurepo
          command=collectstatic
          virtualenv={{ remote_checkout }}/envs/edurepo
    - name: Load repository data from XML
      command: "{{ remote_checkout }}/envs/edurepo/bin/python repo/import_xml.py ../../samples/ import"
      args:
        chdir: "{{ remote_checkout }}/src/edurepo"
    - name: Skip import of resource data in the future
# Use this copy command to touch the file so that the timestamp isn't changed each time.
# That allows us to see the last time the resource data was imported.
      copy: content="" dest={{ remote_checkout }}/data-imported force=no
      notify:
      - load-resource-data
    - name: Define server_validation cron job
      cron: name="server_validation" hour="*/2" minute="11" job="{{ remote_checkout }}/src/edurepo/resources/server_validation.sh"
    - name: Define server_purge cron job
      cron: name="server_purge" hour="1" minute="11" job="{{ remote_checkout }}/src/edurepo/resources/server_purge.sh"
    - name: Define maintain_pretend_teacher cron job
      cron: name="maintain_pretend_teacher" hour="0" minute="30" job="{{ remote_checkout }}/src/edurepo/teachers/pretend_teacher.sh --from-json={{ remote_checkout }}/src/webapp/resources/config.json"
    - name: Define nightly_archive cron job
      cron: name="nightly_archive" hour="1" minute="20" job="{{ remote_checkout }}/src/edurepo/backup.sh /home/{{ remote_user }}/backups"
      when: nightly_archive != "no"
    - name: Set up pretend teacher immediately, so that the demo works without waiting for the cron job.
      command: "{{ remote_checkout }}/src/edurepo/teachers/pretend_teacher.sh {{canonical_base_url }}ed/"
    - name: Configure system httpd
      apache2_module: state=present name=wsgi
      sudo: yes
      when: use_system_httpd == "yes"
    - name: Configure system httpd
      template: src={{ local_conf_dir }}/edurepo-vhost.conf dest=/etc/apache2/sites-enabled/
      sudo: yes
      when: use_system_httpd == "yes"
    - name: Restart system httpd
      command: /etc/init.d/apache2 reload
      sudo: yes
      when: use_system_httpd == "yes"
    - name: Restart custom httpd
      command: '{{ apachectl }} graceful'
      sudo: yes
      when: use_system_httpd == "no"
  handlers:
    - name: load-resource-data
      django_manage: >
          command=loaddata
          app_path={{ remote_checkout }}/src/edurepo
          virtualenv={{ remote_checkout }}/envs/edurepo
          fixtures={{ remote_checkout }}/src/edurepo/resources/fixtures/sample.json
